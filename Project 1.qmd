---
title: "ST558-Project 1"
author: "Siyuan Su" "Wenye Tang"
format: html
editor: visual
---

# Introduction

Census data is of a great interest of statisticians, but it could be challenging to get data from API. Let's first try the example call:

```{r}
library (dplyr)
library (jsonlite)
```

```{r}
base_url_trial <- "https://api.census.gov/data/2022/acs/acs1/pums"
query_params <- list(
  get = "SEX,PWGTP,MAR",   # Fields to retrieve
  SCHL = "24",             # Filter
  key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c"  # API key
)
PUMS_trial <- httr::GET(url = base_url_trial, query = query_params)
PUMS_trial_parsed <- fromJSON(rawToChar(PUMS_trial$content))
str (PUMS_trial_parsed)
```

Then we turn the PUMS_trial into a tibble

```{r}
PUMS_trial_tibble <- as_tibble (PUMS_trial_parsed)
head (PUMS_trial_tibble)
```

Wow, that was successful. So the key was to put the conditions in the query argument in the function GET().

# Data Processing

Now we are going to construct a new function called getPUMS. https://api.census.gov/data/2022/acs/acs1/pums/variables.html Showed all the variable in the data set, which has 525 variables. It would be very hard to get all the variables, even just to a few lines of data. So we have to make clear of what variables to get in the very beginning of writing and adjusting the functions. Let's first go with the original variables in the test sample and deal with the year issue.

## Select functions enabling the selection of year.

We wanted to customize a function that enable custom-selection of Year of survey with default at 2022. That must have something to do with the URL we are inquiring. Let's stick to the variable settings in the trial and play with the year of survey first.

```{r}
getPUMS <- function (year = 2022) {
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  
  query_params <- list(
  get = "SEX,PWGTP,MAR,AGEP",   
  SCHL = "24",             
  key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c") 
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  return (head (PUMScust_tibble))
}
getPUMS (2022)
```

It looks like worked. Let's see whether it worked on other years.

```{r}
getPUMS (2021)
getPUMS (2019)
```

They all worked. I also noticed that if year=2020, will return an error. It turned out the ACS 1-Year PUMS data for the year 2020 was not included in the default path because of smaller-than-previous sample issue.

## Make a function that specifies the numeric values to be returned.

Next we wanted to make a function that solely tells which numeric values to be returned. Default was AGEP and PWGTP, with several options being available.

```{r}
choosenum <- function (numvarinput) {
  
  numvar <- ifelse (numvarinput %in% c("AGEP", "GASP", "GRPIP", "JWAP", "JWMNP"),
             c(numvarinput, "PWGTP"), 
             "error: numeric variable must match with exisiting numeric variable names")
  return (numvar)
  
}
choosenum ("AGEP")
choosenum ("")
```

It is weird no matter what I input, the choosenum function always returns an one-element vector. It turns out this is the setting of ifelse syntax. Try if-else sentence instead.

```{r}
choosenum <- function (numvarinput) {
  if (numvarinput %in% c("AGEP", "GASP", "GRPIP", "JWAP", "JWMNP"))
  {numvar <- c (numvarinput, "PWGTP")}
  else {numvar <- "Error"}
  return (numvar)
}
choosenum ("GASP")
choosenum ("")
```

It returns a string of two characters and takes both my input and another variant PWGTP. Now try "attaching" the new function with our main function getPUMS ()

```{r}
getPUMSv2 <- function (year = 2022, numvarinput = "AGEP") {
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2]),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c") 
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  return (head (PUMScust_tibble))
}
getPUMSv2(2022, "GASP")
```

What happens if I don't choose any numeric values?

```{r}
getPUMSv2(2022)
```

This is cool. This way ensures the numeric input must have a value. Now if you look closely at the objects returned by the getPUMSv2 function, these variables are all character variables. Make them numeric now!

```{r}
#| echo: true
#| eval: false
getPUMSv2.1 <- function (year = 2022, numvarinput) {  
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  
  query_params <- list(
  get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2]),
                SCHL = "24",
                key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c") 
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  PUMScust_tibble <- mutate (PUMScust_tibble, PWGTP_n = as.numeric(PUMScust_tibble$PWGTP))
    return (head (PUMScust_tibble))
}
getPUMSv2.1(2022, "GASP")
```

Attempt to fix the error that might be due to missing values for PUMScust_tibble$PWGTP

```{r}
# WT: Not yet fixed
#| echo: true
#| eval: false

getPUMSv2.1b <- function (year = 2022, numvarinput = "AGEP") {  
  base_url <- paste0("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  
  query_params <- list(
  get = paste0(choosenum(numvarinput)[1],",",choosenum(numvarinput)[2]),
                SCHL = "24",
                key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c") 
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble(PUMScust_parsed)
  PUMScust_tibble <- mutate(PUMScust_tibble, PWGTP_n = as.numeric(as.character(PUMScust_tibble$PWGTP)))
    return(head(PUMScust_tibble))
}
getPUMSv2.1b(2022, "GASP")

```

We fixed the issue of column names in the below updated function getPUMSv2.1c

```{r}
# WT: issue related to mutate() is fixed. Column names are good. Function is getPUMSv2.1c
getPUMSv2.1c <- function(year = 2022, numvarinput = "AGEP"){
  base_url <- paste0("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  query_params <- list(
  get = paste0(choosenum(numvarinput)[1],",",choosenum(numvarinput)[2]),
                SCHL = "24",
                key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c") 
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble(PUMScust_parsed)
# Address the error where the first row of PUMScust_tibble is mistakenly considered data, which should be the column names.
# Set first row as column names
  # Function "unlist" turns the first row of data into a vector.
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
# Remove the first row
  PUMScust_tibble <- PUMScust_tibble[-1,]
# convert column to appropriate data type (int)
  PUMScust_tibble <- type.convert(PUMScust_tibble, as.is = TRUE)
# create a column with numeric value for PWGTP (double)
  PUMScust_tibble <- mutate (PUMScust_tibble, PWGTP_n = as.numeric(PUMScust_tibble$PWGTP))
  return(head(PUMScust_tibble,9))
}
getPUMSv2.1c(2022, "GASP")
```

We noticed that there is a redundant column caused by mutate function, which we will drop later. Now go ahead to test other numeric variables to see if they work.
```{r}
getPUMSv2.1c(2022, "GRPIP")
getPUMSv2.1c(2022, "JWAP")
```
```{r}
getPUMSv2.1c(2022, "JWDP")
```
```{r}
getPUMSv2.1c(2022, "JWMNP")
```

The problem is the time is changed into the correct format. Need to think of ways to decode the time code.

Now, move on to the next topic.

## Make a function that specifies the categorical variables to be returned.

Similarly, for categorical variables, we wanted to make a function that solely tells which character values to be returned. Default was SEX, with several options being available.

```{r}
choosecat <- function (catvarinput= "SEX") {
  if (catvarinput %in% c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX"))
  {catvar <- catvarinput}
  else {catvar <- "Error"}
  return (catvar)
}
choosecat ("FER")
```

The previous code did not the correct factor. 
WT: We updated the above code as follows. Function is choosecatv2

```{r}
# WT: modified the above code to turn variable into levels, one categorical variable must be returned. Level and label information is from the variable website, link provided in the project instructions.
choosecatv2 <- function (catvarinput = "SEX"){
  if (catvarinput %in% c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")){
    catvar <- switch(catvarinput,
        "SEX" = factor(c(1, 2), levels = c(1, 2), labels = c("Male", "Female")),
        "FER" = factor(c(1, 2), levels = c(1, 2), labels = c("Has given birth", "Has not given birth")),
        "HHL" = factor(c(1, 2, 3, 4, 5), levels = c(1, 2, 3, 4, 5),
                labels = c("English only", "Spanish", "Other Indo-European languages", "Asian/Pacific Island languages", "Other language")),
        "HISPEED" = factor(c(1, 2), levels = c(1, 2), labels = c("Yes", "No")),
        "JWTRNS" = factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 
               levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
               labels = c("Car, truck, or van", "Bus", "Subway or elevated rail", "Long-distance train or commuter rail", "Light rail, streetcar, or trolley", "Ferryboat", "Taxicab", "Motorcycle", "Bicycle", "Walked", "Worked from home", "Other method")),
        "SCH" = factor(c(1, 2, 3), levels = c(1, 2, 3), labels = c("No, has not attended in the last 3 months", "Yes, public school or public college", "Yes, private school or college or home school")),
        "SCHL" = factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), labels = c("No schooling completed", "Nursery school, preschool", "Kindergarten", "Grade 1", "Grade 2", "Grade 3", "Grade 4", "Grade 5", "Grade 6", "Grade 7", "Grade 8", "Grade 9", "Grade 10", "Grade 11", "12th grade - no diploma", "Regular high school diploma", "GED or alternative credential", "Some college, but less than 1 year", "1 or more years of college credit, no degree", "Associate's degree", "Bachelor's degree", "Master's degree", "Professional degree beyond a bachelor's degree", "Doctorate degree"))  
    )
  } else {
     catvar <- "Error: Invalid input variable"
  }
  return(catvar)
  }
  
# calling the following function will return the details for the categorical variable
choosecatv2("HHL")
choosecatv2("SCHL")

```

Now let's concatenate this sub function into the original function and setting up the default categorical variable input as "SEX".

```{r}
getPUMSv3 <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX") {
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput)),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  return (head (PUMScust_tibble,9))
}
getPUMSv3(2022,"GASP","HHL")
getPUMSv3(year=2022,numvarinput = "GASP")
```
We could try all the requested categorical variables to see if works.

```{r}
getPUMSv3(2022,"GASP","FER")
getPUMSv3(2022,"GASP","HISPEED")
getPUMSv3(2022,"GASP","JWTRNS")
getPUMSv3(2022,"GASP","SCH")
getPUMSv3(2022,"GASP","SCHL")
```

Now except for the variables not being categorical but character, all other requirements are there.

Update: We modified the above function as follows. Changed column vector to 'factor' type for categorical variables. Function is getPUMSv3b

```{r}
# The function getPUMSv3 is modified as getPUMSv3b, as follows. Issues related to first row data and converting variable to categorical variable are addressed (SCHL = "24" was removed; did not see this requirement in the instructions. But then being added back - too long runtime)
getPUMSv3b <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX") {
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput)),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  PUMScust_tibble <- mutate(PUMScust_tibble, PWGTP_n = as.numeric(PUMScust_tibble$PWGTP))
  
  # directly change the column vector to 'factor' type without adding a column to the dataset
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]]))
  
  return (head(PUMScust_tibble))
  
}
getPUMSv3b(2022,"GASP","HHL")

```

## Make a function to specify the geographical level

We are interested in getting data with specific geographic levels and wanted to also specify the geographic items we are interested in (a specific region, district or state(s)). Checking the examples provided by the US census on the example URLs (https://api.census.gov/data/2022/acs/acs1/pums/examples.html):

Default call: https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24&key=YOUR_KEY_GOES_HERE

To get the region-specific data: https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&for=region:*&SCHL=24&key=YOUR_KEY_GOES_HERE.*

*To get the division-specific data: https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&for=division:*&SCHL=24&key=YOUR_KEY_GOES_HERE

To get the state-specific data: https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:\*&SCHL=24&key=YOUR_KEY_GOES_HERE

It is easy to see the parameter here need to deal with is "for=XXX", which is included in the argument "query" in the function GET(). Thus we could let the new function specify this part. But after playing with it for a while we figured out in the query_params, geographic option should be included in the "get=" argument instead of "for=" argument because in R for is designated for the loop.

```{r}
getPUMSv4.0 <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX") {
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  
  query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  return (head (PUMScust_tibble))
}
getPUMSv4.0(2022,"GASP","HHL")
```

We updated the above code as follows. Function getPUMSv4.0b

```{r}
# WT: updates are mainly for address the data type converting
getPUMSv4.0b <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX") {
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  # this is to add a column and change the value type to numeric
  PUMScust_tibble <- mutate(PUMScust_tibble, PWGTP_n = as.numeric(PUMScust_tibble$PWGTP))
  
  # directly change the column vector to 'factor' type without adding a column to the dataset
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]]))
  
  return (head(PUMScust_tibble))
  
}
getPUMSv4.0b(2022,"GASP","HHL")

```

For the ease of exercising, I directly input the level of geography in the previous function. Now we want to build a function to let user select geographic level as well as specify the region, division or state. Let's make a small function first.

```{r}
choosegeolvl <- function (geolvlinput) {
  if (geolvlinput %in% c("REGION", "DIVISION","ST","all"))
  {geolvlvar <- geolvlinput}
  else {geolvlvar <- "Error"}
  return (geolvlvar)
}
choosegeolvl ("ST")
choosegeolvl("DIVISION")
#SS: added another line to test error function
choosegeolvl ("all")
```

Now that we have the function to specify geographic level we want to display, integrate in the main function. Note that the default was "of All", which we interpret as all geographic levels.

```{r}
getPUMSv4.1 <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX", geolvlinput) {
  if (geolvlinput %in% c("REGION", "DIVISION","ST"))
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  else if (geolvlinput == "all")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  return (head (PUMScust_tibble))
}
getPUMSv4.1(2022,"GASP","HHL","ST")
getPUMSv4.1(2022,"GASP","HHL","all")
```

WT: Updated the above code as follows. Function "getPUMSv4.1b"

SS: Changes including finalizing the tables and setting up a default output of all geographic level for this function.

```{r}
# WT: updated the code to "getPUMSv4.1b", but we did not see "All" in the variable list, only "region", "ST", ...
# SS: Change the default input of geographic level into "state". Default = "all" is just asking to output all geolevel, but it is tricky to make this happen.
getPUMSv4.1b <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX", geolvlinput = "all") {
  if (geolvlinput %in% c("REGION", "DIVISION","ST"))
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  else if (geolvlinput == "all")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  # this is to add a column and change the value type to numeric
  PUMScust_tibble <- mutate(PUMScust_tibble, PWGTP_n = as.numeric(PUMScust_tibble$PWGTP))
  
  # directly change the column vector to 'factor' type without adding a column to the dataset
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]]))
  
  return (head(PUMScust_tibble))
  
}
getPUMSv4.1b(2022,"GASP","HHL", "DIVISION")
getPUMSv4.1b(2022,"GASP","HHL", "all")

```

Now let's enable an option to allow user to subset the data based on geographic information, and it must be on API. Considering the argument of query is essentially a list, which specifies "SCHL ="24", we could try specify here as well.

```{r}
getPUMSv4.2 <- function (year = 2022, numvarinput = "AGEP", catvarinput = "SEX", geolvlinput = "all", geospctinput) {
  if (geolvlinput == "REGION")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    SCHL = "24",
    REGION = as.character (geospctinput),
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  else if (geolvlinput == "DIVISION")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    SCHL = "24",
    DIVISION = as.character (geospctinput),
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  else if (geolvlinput == "ST")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    SCHL = "24",
    ST = as.character (geospctinput),
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  else if (geolvlinput == "all")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    ST = "09",
    SCHL = "23",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  # this is to add a column and change the value type to numeric
  PUMScust_tibble <- mutate(PUMScust_tibble, PWGTP_n = as.numeric(PUMScust_tibble$PWGTP))
  
  # directly change the column vector to 'factor' type without adding a column to the dataset
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]]))
  return (head (PUMScust_tibble))
}
getPUMSv4.2(2022,"GASP","HHL","state","09")
```

It throws out an error. Looks like geographic-related variables could not be subset in the same way as other variables. But how to solve the 'for' problem? We figured out later a backtick (\`) should be used to avoid confusion.

```{r}
# WT: updated the above function as follows.
# SS: 1. There is a special thing about the level "ST". as a variable it is called "ST", but in the "for" call it is called "state". It was a pity they were not the same.
# SS: 2. Modified the tibble coding part. Use |> instead of %>% and adding more string to keep the coding compact. Dropped the SCHL function that is previously encoded to speed up

getPUMSv4.3 <- function (year = 2022, 
                         numvarinput = "AGEP", 
                         catvarinput = "SEX", 
                         geolvlinput = "all", 
                         geospecinput) {

  base_url <- paste0("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
  
    #If you requested to see such geographic level data, then need to get the geo data for the corresponding levels and also you could search specific code based on the requested geographic level.
  if (geolvlinput %in% c("REGION", "DIVISION"))
  {
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    `for` = paste0 (geolvlinput,":",geospecinput),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  }
  else if (geolvlinput == "ST")
  {
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","ST"),
    `for` = paste0 ("state",":",geospecinput),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  }
  else if (geolvlinput == "all")
  {
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  PUMScust_tibble <- PUMScust_tibble |> mutate(PWGTP := as.numeric(PUMScust_tibble$PWGTP))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]])) |> select (1:4)
  return (head (PUMScust_tibble))
}
getPUMSv4.3(2022,"GASP","HHL","ST","37")
getPUMSv4.3(2022,"GASP","HHL","DIVISION","5")
getPUMSv4.3(2022,"GASP","HHL","REGION","1")
```

Now we modify the function so that we can pull multiple years of survey data

```{r}
# Function: getPUMSv4.4
getPUMSv4.4 <- function (years = c(2022), numvarinput = "AGEP", catvarinput = "SEX", geolvlinput, geospecinput, filter_value = NULL, filter_column = NULL) {
  
  # create an empty list
  multiple_years <- list()
  
  for (year in years) {
    if (geolvlinput %in% c("REGION", "DIVISION"))
      {base_url <- paste0 ("https://api.census.gov/data/",as.character(year), "/acs/acs1/pums")
      query_params <- list(
        get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
        `for` = paste0 (geolvlinput,":",geospecinput),
        SCHL = "24",
        key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  }
  else if (geolvlinput == "ST")
  {base_url <- paste0 ("https://api.census.gov/data/",as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","ST"),
    `for` = paste0 ("state",":",geospecinput),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")
  }
  else if (geolvlinput == "all")
  {base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",","REGION",",","ST",",","DIVISION"),
    SCHL = "24",
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c")}
    
  # optional filtering
  if (!is.null(filter_value) & !is.null(filter_column)) {
    query_params[[filter_column]] <- filter_value
  }
  
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  PUMScust_tibble <- PUMScust_tibble |> mutate(PWGTP := as.numeric(PUMScust_tibble$PWGTP))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]])) |> select (1:4) |> mutate (YEAR = as.character (year))
  #SS: Added year as a variable so that we know which year the data comes from
    
  multiple_years[[as.character(year)]] <- PUMScust_tibble
  }  
    allyeardata <- bind_rows(multiple_years)
    # we remove the 'head', so that the function returns a complete tibble dataset
  return(allyeardata)
}
# following call works (takes long time)
getPUMSv4.4(c(2021,2022),"GASP","HHL","ST","37",filter_value="24", filter_column = "SCHL" )
```

In the function "getPUMSsum", we get the class 'census' assigned to tibble at the end, to get things ready for the next function 'summary.census'.
Tied up a couple of loose ends. We specify that state = "09" in the API query. According to the updated instructions, our group only works the subset data where ST = '09' (Connecticut). We also included a column of 'year'.
```{r}
# This function is updated to include 'census' class assigned to the tibble  
getPUMSsum <- function (years = c(2022), numvarinput = "AGEP", catvarinput = "SEX", geolvlinput, filter_value = NULL, filter_column = NULL) {
  
  # create an empty list
  multiple_years <- list()
    for (year in years) {
    
    base_url <- paste0 ("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums")
    ST = "09"
    query_params <- list(
    get = paste0 (choosenum(numvarinput)[1],",",choosenum(numvarinput)[2],",",choosecat(catvarinput),",",choosegeolvl(geolvlinput)),
    `for` = "state:09",  # add the state filter to the query, only pull ST = "09" data, Connecticut
    key = "41b1ae36641c0a01c8cf9a48396a6c82ab8f6d9c"    )
  # optional filtering
  if (!is.null(filter_value) & !is.null(filter_column)) {
    query_params[[filter_column]] <- filter_value
  }
  PUMScust <- httr::GET(url = base_url, query = query_params)
  PUMScust_parsed <- fromJSON(rawToChar(PUMScust$content))
  PUMScust_tibble <- as_tibble (PUMScust_parsed)
  colnames(PUMScust_tibble) <- as.character(unlist(PUMScust_tibble[1,]))
  PUMScust_tibble <- PUMScust_tibble[-1, ]
  # this is to add a column and change the value type to numeric
  PUMScust_tibble <- PUMScust_tibble |> mutate(PWGTP := as.numeric(PUMScust_tibble$PWGTP))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosecat(catvarinput) := as.factor(.[[choosecat(catvarinput)]]))
  PUMScust_tibble <- PUMScust_tibble %>% mutate(!!choosenum(numvarinput)[1] := as.numeric(.[[choosenum(numvarinput)[1]]])) |> select (1:4) |> mutate (YEAR = as.character (year))
  multiple_years[[as.character(year)]] <- PUMScust_tibble
  }  
  allyeardata <- bind_rows(multiple_years)
  current_classes <- class(allyeardata)
  class(allyeardata) <- c("census", current_classes)
  # we remove the 'head', so that the function returns a complete tibble dataset
  return(allyeardata)
}
# following call works (takes long time)
getPUMSsum(c(2021,2022),"GASP","HHL","ST",filter_value="24", filter_column = "SCHL" )
# get the data and give it a name, which will be the first argument in the Function "summary.census"
PUMS_tibble_census <- getPUMSsum(c(2021,2022),"GASP","HHL","ST",filter_value="24", filter_column = "SCHL" )

```

We developed a function "summary.census" below that produces means and standard deviations for numeric variables and counts for categorical variables

```{r}
# This function will use the output of getPUMSsum function as one of the argument, and summarize weighted mean, std. dev, and the count
summary.census <- function(tibble_data, num_vars=NULL, cat_vars=NULL) {
  # if numeric variable, then put it in a vector num_vars. We leave "PWGTP_n" out, it's the weighting info used in summary
  if(is.null(num_vars)){
    num_vars <- names(tibble_data)[sapply(tibble_data, is.numeric) & names(tibble_data) != "PWGTP_n" ]
  }
  # if categorical variable, then put it in a vector cat_vars
  if(is.null(cat_vars)){
    cat_vars <- names(tibble_data)[sapply(tibble_data, is.factor)]
  }
    result_list <- list()
  weight_vector <- tibble_data$PWGTP_n
  
  for (num_var in num_vars){
    numeric_vector <- tibble_data[[num_var]]
  
  # calculate sample mean for numeric variable
  sample_mean <- sum(numeric_vector*weight_vector)/sum(weight_vector)
    # calculate sample std dev for numeric variable
  sample_stddev <- sqrt(sum(numeric_vector^2*weight_vector)/sum(weight_vector)-sample_mean^2)
    # return the values as a named list
  result_list[[paste0(num_var, "_mean")]] <- sample_mean
  result_list[[paste0(num_var, "_sd")]] <- sample_stddev
  }
  
  for (cat_var in cat_vars){
    cat_table <- table(tibble_data[[cat_var]])
    result_list[[paste0(cat_var, "_counts")]] <- cat_table
  }
  return(result_list)
}

summary_stat <- summary.census(PUMS_tibble_census)
summary_stat
```

Next, We create a generic plot() function for a census class tibble

```{r}
# This code chunk creates a generic plot() function for a census class tibble, with three arguments. 
library(ggplot2)

plot.census <- function(tibble_data, cat_var, num_var){
  plot <- ggplot((tibble_data), 
                 aes(x = get(cat_var), 
                     y = get(num_var), 
                     weight = PWGTP_n)) +
                geom_boxplot()+
    labs(title = paste("Plot of", num_var, "by", cat_var)) +
    xlab(cat_var) + 
    ylab(num_var)
  print(plot)
}

# call the function and return a plot
plot.census(PUMS_tibble_census, "HHL", "GASP")
```

## Interesting topics to investigate using the census data and the API and summary functions.

Topic - How does gross rent as a % of household income vary among different language speaking families? (We were more interested in finding income distribution among different attributes. However, the GRPIP is not one of the user options and this variable seems not working in API function. Will revisit)

```{r}
PUMS_tibble_census <- getPUMSsum(c(2021,2022),"GRPIP","HHL","ST",filter_value="24", filter_column = "SCHL" )
PUMS_tibble_census
# obtain the summary statistics
summary_stat <- summary.census(PUMS_tibble_census)
summary_stat
# plot
plot.census(PUMS_tibble_census, "HHL", "GRPIP")

```

## Final remarks.

After several trial and error in each step explained in the instructions, we were able to finalize a function "getPUMSsum" that does what are required in the project. To verify the functionality, the function was called with various combinations of options, and we were able to obtain the summary statistics and the plot from the data retrived.

```{r}
PUMS_tibble_census <- getPUMSsum(c(2019, 2021,2022),"GASP","HHL","ST",filter_value="24", filter_column = "SCHL" )
PUMS_tibble_census <- getPUMSsum(c(2019, 2021,2022),"GRPIP","SCH","ST",filter_value="24", filter_column = "SCHL" )
PUMS_tibble_census <- getPUMSsum(c(2019, 2021,2022),"JWAP","JWTRNS","ST",filter_value="24", filter_column = "SCHL" )
summary_stat <- summary.census(PUMS_tibble_census)
```

